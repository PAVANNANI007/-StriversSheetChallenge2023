import java.util.*;
import java.io.*;

/************************************************************
 * 
 * Following is the TreeNode class structure
 * 
 * class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * 
 * TreeNode(int val) {
 * this.val = val;
 * this.left = null;
 * this.right = null;
 * }
 * }
 * 
 * 
 ************************************************************/
import java.util.*;

class Node {
	TreeNode root;
	int index;

	Node(TreeNode root, int index) {
		this.root = root;
		this.index = index;
	}
}

public class Solution {
	public static int getMaxWidth(TreeNode root) {
		if (root == null)
			return 0;
		Queue<Node> q = new LinkedList<>();
		int maxWidth = 0, assign = 0;
		q.add(new Node(root, 0));
		while (!q.isEmpty()) {
			int size = q.size();
			int min = q.peek().index;
			int first = 0, last = 0;
			for (int i = 0; i < size; i++) {
				int currIndex = q.peek().index - min;
				TreeNode front = q.peek().root;
				q.poll();
				if (i == 0)
					first = currIndex;
				if (i == size - 1)
					last = currIndex;
				if (front.left != null) {
					q.add(new Node(front.left, ++assign));
				}
				if (front.right != null) {
					q.add(new Node(front.right, ++assign));
				}
			}
			maxWidth = Math.max(maxWidth, last - first + 1);
		}
		return maxWidth;
	}
}
