import java.util.* ;
import java.io.*; 
/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T> 
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data) 
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

import java.util.ArrayList;

public class Solution 
{
    private static class Tuple {
        final TreeNode<Integer> node;
        final int col;
        Tuple(TreeNode<Integer> node, int col) {
            this.node = node;
            this.col = col;
        }
    }

    public static ArrayList<Integer> verticalOrderTraversal(TreeNode<Integer> root) {
        // key=column, value=column node values
        Map<Integer, List<Integer>> map = new TreeMap<Integer, List<Integer>>();
        Queue<Tuple> queue = new LinkedList<Tuple>();
        queue.add(new Tuple(root, 0));
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int s = 0; s < size; s++) {
                Tuple tuple = queue.poll();
                List<Integer> values;
                if (map.containsKey(tuple.col)) {
                    values = map.get(tuple.col);
                } else {
                    values = new ArrayList<Integer>();
                    map.put(tuple.col, values);
                }
                values.add(tuple.node.data);
                if (tuple.node.left != null) {
                    queue.add(new Tuple(tuple.node.left, tuple.col - 1));
                }
                if (tuple.node.right != null) {
                    queue.add(new Tuple(tuple.node.right, tuple.col + 1));
                }
            }
        }
        ArrayList<Integer> result = new ArrayList<Integer>();
        map.values().stream().forEach(result::addAll);
        return result;
    }
}
